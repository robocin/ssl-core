// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protocols/referee/game_status.proto

package referee

import (
	common "github.com/robocin/ssl-core/playback-ms/pkg/pb/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId               string                           `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Description            *string                          `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Timestamp              *timestamppb.Timestamp           `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MatchType              common.MatchType                 `protobuf:"varint,4,opt,name=match_type,json=matchType,proto3,enum=protocols.common.MatchType" json:"match_type,omitempty"`
	HomeTeam               *GameStatus_Team                 `protobuf:"bytes,5,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam               *GameStatus_Team                 `protobuf:"bytes,6,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	GameStage              common.GameStage                 `protobuf:"varint,7,opt,name=game_stage,json=gameStage,proto3,enum=protocols.common.GameStage" json:"game_stage,omitempty"`
	GameStageTimeLeft      *durationpb.Duration             `protobuf:"bytes,8,opt,name=game_stage_time_left,json=gameStageTimeLeft,proto3,oneof" json:"game_stage_time_left,omitempty"`
	TotalCommandsIssued    uint64                           `protobuf:"varint,9,opt,name=total_commands_issued,json=totalCommandsIssued,proto3" json:"total_commands_issued,omitempty"`
	CommandIssuedTimestamp *timestamppb.Timestamp           `protobuf:"bytes,10,opt,name=command_issued_timestamp,json=commandIssuedTimestamp,proto3" json:"command_issued_timestamp,omitempty"`
	Command                *common.GameCommand              `protobuf:"bytes,11,opt,name=command,proto3" json:"command,omitempty"`
	NextCommand            *common.GameCommand              `protobuf:"bytes,12,opt,name=next_command,json=nextCommand,proto3" json:"next_command,omitempty"`
	GameEvents             []*common.GameEvent              `protobuf:"bytes,13,rep,name=game_events,json=gameEvents,proto3" json:"game_events,omitempty"`
	GameEventsProposals    []*GameStatus_GameEventsProposal `protobuf:"bytes,14,rep,name=game_events_proposals,json=gameEventsProposals,proto3" json:"game_events_proposals,omitempty"`
}

func (x *GameStatus) Reset() {
	*x = GameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_referee_game_status_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus) ProtoMessage() {}

func (x *GameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_referee_game_status_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus.ProtoReflect.Descriptor instead.
func (*GameStatus) Descriptor() ([]byte, []int) {
	return file_protocols_referee_game_status_proto_rawDescGZIP(), []int{0}
}

func (x *GameStatus) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *GameStatus) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GameStatus) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GameStatus) GetMatchType() common.MatchType {
	if x != nil {
		return x.MatchType
	}
	return common.MatchType(0)
}

func (x *GameStatus) GetHomeTeam() *GameStatus_Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *GameStatus) GetAwayTeam() *GameStatus_Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *GameStatus) GetGameStage() common.GameStage {
	if x != nil {
		return x.GameStage
	}
	return common.GameStage(0)
}

func (x *GameStatus) GetGameStageTimeLeft() *durationpb.Duration {
	if x != nil {
		return x.GameStageTimeLeft
	}
	return nil
}

func (x *GameStatus) GetTotalCommandsIssued() uint64 {
	if x != nil {
		return x.TotalCommandsIssued
	}
	return 0
}

func (x *GameStatus) GetCommandIssuedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CommandIssuedTimestamp
	}
	return nil
}

func (x *GameStatus) GetCommand() *common.GameCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *GameStatus) GetNextCommand() *common.GameCommand {
	if x != nil {
		return x.NextCommand
	}
	return nil
}

func (x *GameStatus) GetGameEvents() []*common.GameEvent {
	if x != nil {
		return x.GameEvents
	}
	return nil
}

func (x *GameStatus) GetGameEventsProposals() []*GameStatus_GameEventsProposal {
	if x != nil {
		return x.GameEventsProposals
	}
	return nil
}

type GameStatus_Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                                   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Score                                  uint32                 `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	RobotIds                               []*common.RobotId      `protobuf:"bytes,3,rep,name=robot_ids,json=robotIds,proto3" json:"robot_ids,omitempty"`
	GoalkeeperId                           *common.RobotId        `protobuf:"bytes,4,opt,name=goalkeeper_id,json=goalkeeperId,proto3" json:"goalkeeper_id,omitempty"`
	YellowCards                            uint32                 `protobuf:"varint,5,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	TimeToExpireActiveYellowCards          []*durationpb.Duration `protobuf:"bytes,6,rep,name=time_to_expire_active_yellow_cards,json=timeToExpireActiveYellowCards,proto3" json:"time_to_expire_active_yellow_cards,omitempty"`
	RedCards                               uint32                 `protobuf:"varint,7,opt,name=red_cards,json=redCards,proto3" json:"red_cards,omitempty"`
	TimeoutsLeft                           uint32                 `protobuf:"varint,8,opt,name=timeouts_left,json=timeoutsLeft,proto3" json:"timeouts_left,omitempty"`
	TotalTimeoutTimeLeft                   *durationpb.Duration   `protobuf:"bytes,9,opt,name=total_timeout_time_left,json=totalTimeoutTimeLeft,proto3" json:"total_timeout_time_left,omitempty"`
	TotalFoulsCommitted                    uint32                 `protobuf:"varint,10,opt,name=total_fouls_committed,json=totalFoulsCommitted,proto3" json:"total_fouls_committed,omitempty"`
	ConsecutiveBallPlacementFailures       uint32                 `protobuf:"varint,11,opt,name=consecutive_ball_placement_failures,json=consecutiveBallPlacementFailures,proto3" json:"consecutive_ball_placement_failures,omitempty"`
	IsBallPlacementEnabled                 bool                   `protobuf:"varint,12,opt,name=is_ball_placement_enabled,json=isBallPlacementEnabled,proto3" json:"is_ball_placement_enabled,omitempty"`
	HasBallPlacementFailuresReachedMaximum bool                   `protobuf:"varint,13,opt,name=has_ball_placement_failures_reached_maximum,json=hasBallPlacementFailuresReachedMaximum,proto3" json:"has_ball_placement_failures_reached_maximum,omitempty"`
	MaximumAllowedRobots                   uint32                 `protobuf:"varint,14,opt,name=maximum_allowed_robots,json=maximumAllowedRobots,proto3" json:"maximum_allowed_robots,omitempty"`
	IsRobotSubstitutionRequested           bool                   `protobuf:"varint,15,opt,name=is_robot_substitution_requested,json=isRobotSubstitutionRequested,proto3" json:"is_robot_substitution_requested,omitempty"`
	IsRobotSubstitutionAllowed             bool                   `protobuf:"varint,16,opt,name=is_robot_substitution_allowed,json=isRobotSubstitutionAllowed,proto3" json:"is_robot_substitution_allowed,omitempty"`
	RobotSubstitutionsLeft                 uint32                 `protobuf:"varint,17,opt,name=robot_substitutions_left,json=robotSubstitutionsLeft,proto3" json:"robot_substitutions_left,omitempty"`
	RobotSubstitutionTimeLeft              *durationpb.Duration   `protobuf:"bytes,18,opt,name=robot_substitution_time_left,json=robotSubstitutionTimeLeft,proto3" json:"robot_substitution_time_left,omitempty"`
}

func (x *GameStatus_Team) Reset() {
	*x = GameStatus_Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_referee_game_status_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus_Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus_Team) ProtoMessage() {}

func (x *GameStatus_Team) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_referee_game_status_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus_Team.ProtoReflect.Descriptor instead.
func (*GameStatus_Team) Descriptor() ([]byte, []int) {
	return file_protocols_referee_game_status_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GameStatus_Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameStatus_Team) GetScore() uint32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *GameStatus_Team) GetRobotIds() []*common.RobotId {
	if x != nil {
		return x.RobotIds
	}
	return nil
}

func (x *GameStatus_Team) GetGoalkeeperId() *common.RobotId {
	if x != nil {
		return x.GoalkeeperId
	}
	return nil
}

func (x *GameStatus_Team) GetYellowCards() uint32 {
	if x != nil {
		return x.YellowCards
	}
	return 0
}

func (x *GameStatus_Team) GetTimeToExpireActiveYellowCards() []*durationpb.Duration {
	if x != nil {
		return x.TimeToExpireActiveYellowCards
	}
	return nil
}

func (x *GameStatus_Team) GetRedCards() uint32 {
	if x != nil {
		return x.RedCards
	}
	return 0
}

func (x *GameStatus_Team) GetTimeoutsLeft() uint32 {
	if x != nil {
		return x.TimeoutsLeft
	}
	return 0
}

func (x *GameStatus_Team) GetTotalTimeoutTimeLeft() *durationpb.Duration {
	if x != nil {
		return x.TotalTimeoutTimeLeft
	}
	return nil
}

func (x *GameStatus_Team) GetTotalFoulsCommitted() uint32 {
	if x != nil {
		return x.TotalFoulsCommitted
	}
	return 0
}

func (x *GameStatus_Team) GetConsecutiveBallPlacementFailures() uint32 {
	if x != nil {
		return x.ConsecutiveBallPlacementFailures
	}
	return 0
}

func (x *GameStatus_Team) GetIsBallPlacementEnabled() bool {
	if x != nil {
		return x.IsBallPlacementEnabled
	}
	return false
}

func (x *GameStatus_Team) GetHasBallPlacementFailuresReachedMaximum() bool {
	if x != nil {
		return x.HasBallPlacementFailuresReachedMaximum
	}
	return false
}

func (x *GameStatus_Team) GetMaximumAllowedRobots() uint32 {
	if x != nil {
		return x.MaximumAllowedRobots
	}
	return 0
}

func (x *GameStatus_Team) GetIsRobotSubstitutionRequested() bool {
	if x != nil {
		return x.IsRobotSubstitutionRequested
	}
	return false
}

func (x *GameStatus_Team) GetIsRobotSubstitutionAllowed() bool {
	if x != nil {
		return x.IsRobotSubstitutionAllowed
	}
	return false
}

func (x *GameStatus_Team) GetRobotSubstitutionsLeft() uint32 {
	if x != nil {
		return x.RobotSubstitutionsLeft
	}
	return 0
}

func (x *GameStatus_Team) GetRobotSubstitutionTimeLeft() *durationpb.Duration {
	if x != nil {
		return x.RobotSubstitutionTimeLeft
	}
	return nil
}

type GameStatus_GameEventsProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProposalId  string              `protobuf:"bytes,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	GameEvents  []*common.GameEvent `protobuf:"bytes,2,rep,name=game_events,json=gameEvents,proto3" json:"game_events,omitempty"`
	WasAccepted bool                `protobuf:"varint,3,opt,name=was_accepted,json=wasAccepted,proto3" json:"was_accepted,omitempty"`
}

func (x *GameStatus_GameEventsProposal) Reset() {
	*x = GameStatus_GameEventsProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_referee_game_status_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus_GameEventsProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus_GameEventsProposal) ProtoMessage() {}

func (x *GameStatus_GameEventsProposal) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_referee_game_status_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus_GameEventsProposal.ProtoReflect.Descriptor instead.
func (*GameStatus_GameEventsProposal) Descriptor() ([]byte, []int) {
	return file_protocols_referee_game_status_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GameStatus_GameEventsProposal) GetProposalId() string {
	if x != nil {
		return x.ProposalId
	}
	return ""
}

func (x *GameStatus_GameEventsProposal) GetGameEvents() []*common.GameEvent {
	if x != nil {
		return x.GameEvents
	}
	return nil
}

func (x *GameStatus_GameEventsProposal) GetWasAccepted() bool {
	if x != nil {
		return x.WasAccepted
	}
	return false
}

var File_protocols_referee_game_status_proto protoreflect.FileDescriptor

var file_protocols_referee_game_status_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x10, 0x0a, 0x0a, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x2e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x4f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x1a, 0xb6, 0x08, 0x0a, 0x04, 0x54, 0x65,
	0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x08, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x0c, 0x67, 0x6f, 0x61, 0x6c, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x72, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12,
	0x50, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65, 0x66,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x75, 0x6c, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x75, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x5b, 0x0a, 0x2b, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x68, 0x61, 0x73, 0x42, 0x61, 0x6c, 0x6c, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x69, 0x73, 0x5f,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x5a, 0x0a, 0x1c, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x65,
	0x66, 0x74, 0x1a, 0x96, 0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x77, 0x61, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_referee_game_status_proto_rawDescOnce sync.Once
	file_protocols_referee_game_status_proto_rawDescData = file_protocols_referee_game_status_proto_rawDesc
)

func file_protocols_referee_game_status_proto_rawDescGZIP() []byte {
	file_protocols_referee_game_status_proto_rawDescOnce.Do(func() {
		file_protocols_referee_game_status_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_referee_game_status_proto_rawDescData)
	})
	return file_protocols_referee_game_status_proto_rawDescData
}

var file_protocols_referee_game_status_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protocols_referee_game_status_proto_goTypes = []interface{}{
	(*GameStatus)(nil),                    // 0: protocols.referee.GameStatus
	(*GameStatus_Team)(nil),               // 1: protocols.referee.GameStatus.Team
	(*GameStatus_GameEventsProposal)(nil), // 2: protocols.referee.GameStatus.GameEventsProposal
	(*timestamppb.Timestamp)(nil),         // 3: google.protobuf.Timestamp
	(common.MatchType)(0),                 // 4: protocols.common.MatchType
	(common.GameStage)(0),                 // 5: protocols.common.GameStage
	(*durationpb.Duration)(nil),           // 6: google.protobuf.Duration
	(*common.GameCommand)(nil),            // 7: protocols.common.GameCommand
	(*common.GameEvent)(nil),              // 8: protocols.common.GameEvent
	(*common.RobotId)(nil),                // 9: protocols.common.RobotId
}
var file_protocols_referee_game_status_proto_depIdxs = []int32{
	3,  // 0: protocols.referee.GameStatus.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 1: protocols.referee.GameStatus.match_type:type_name -> protocols.common.MatchType
	1,  // 2: protocols.referee.GameStatus.home_team:type_name -> protocols.referee.GameStatus.Team
	1,  // 3: protocols.referee.GameStatus.away_team:type_name -> protocols.referee.GameStatus.Team
	5,  // 4: protocols.referee.GameStatus.game_stage:type_name -> protocols.common.GameStage
	6,  // 5: protocols.referee.GameStatus.game_stage_time_left:type_name -> google.protobuf.Duration
	3,  // 6: protocols.referee.GameStatus.command_issued_timestamp:type_name -> google.protobuf.Timestamp
	7,  // 7: protocols.referee.GameStatus.command:type_name -> protocols.common.GameCommand
	7,  // 8: protocols.referee.GameStatus.next_command:type_name -> protocols.common.GameCommand
	8,  // 9: protocols.referee.GameStatus.game_events:type_name -> protocols.common.GameEvent
	2,  // 10: protocols.referee.GameStatus.game_events_proposals:type_name -> protocols.referee.GameStatus.GameEventsProposal
	9,  // 11: protocols.referee.GameStatus.Team.robot_ids:type_name -> protocols.common.RobotId
	9,  // 12: protocols.referee.GameStatus.Team.goalkeeper_id:type_name -> protocols.common.RobotId
	6,  // 13: protocols.referee.GameStatus.Team.time_to_expire_active_yellow_cards:type_name -> google.protobuf.Duration
	6,  // 14: protocols.referee.GameStatus.Team.total_timeout_time_left:type_name -> google.protobuf.Duration
	6,  // 15: protocols.referee.GameStatus.Team.robot_substitution_time_left:type_name -> google.protobuf.Duration
	8,  // 16: protocols.referee.GameStatus.GameEventsProposal.game_events:type_name -> protocols.common.GameEvent
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_protocols_referee_game_status_proto_init() }
func file_protocols_referee_game_status_proto_init() {
	if File_protocols_referee_game_status_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_referee_game_status_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_referee_game_status_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus_Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_referee_game_status_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus_GameEventsProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocols_referee_game_status_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_referee_game_status_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocols_referee_game_status_proto_goTypes,
		DependencyIndexes: file_protocols_referee_game_status_proto_depIdxs,
		MessageInfos:      file_protocols_referee_game_status_proto_msgTypes,
	}.Build()
	File_protocols_referee_game_status_proto = out.File
	file_protocols_referee_game_status_proto_rawDesc = nil
	file_protocols_referee_game_status_proto_goTypes = nil
	file_protocols_referee_game_status_proto_depIdxs = nil
}
