// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protocols/perception/detection.proto

package perception

import (
	common "github.com/robocin/ssl-core/playback-ms/pkg/pb/common"
	detection "github.com/robocin/ssl-core/playback-ms/pkg/pb/third_party/detection"
	game_controller "github.com/robocin/ssl-core/playback-ms/pkg/pb/third_party/game_controller"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DetectionWrapper is the message that encapsulates all types of detection available.
type DetectionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message generated by the perception service.
	Detection *Detection `protobuf:"bytes,1,opt,name=detection,proto3" json:"detection,omitempty"`
	// Repeated raw detection data from a third-party simulator or ssl-vision.
	RawDetections []*detection.SSL_WrapperPacket `protobuf:"bytes,2,rep,name=raw_detections,json=rawDetections,proto3" json:"raw_detections,omitempty"`
	// Repeated tracked detection data from a third-party ssl-game-controller.
	TrackedDetections []*game_controller.TrackerWrapperPacket `protobuf:"bytes,3,rep,name=tracked_detections,json=trackedDetections,proto3" json:"tracked_detections,omitempty"`
}

func (x *DetectionWrapper) Reset() {
	*x = DetectionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionWrapper) ProtoMessage() {}

func (x *DetectionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionWrapper.ProtoReflect.Descriptor instead.
func (*DetectionWrapper) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{0}
}

func (x *DetectionWrapper) GetDetection() *Detection {
	if x != nil {
		return x.Detection
	}
	return nil
}

func (x *DetectionWrapper) GetRawDetections() []*detection.SSL_WrapperPacket {
	if x != nil {
		return x.RawDetections
	}
	return nil
}

func (x *DetectionWrapper) GetTrackedDetections() []*game_controller.TrackerWrapperPacket {
	if x != nil {
		return x.TrackedDetections
	}
	return nil
}

// Detection is the message sent by the perception service to the rest of the system.
type Detection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The incremental unique id of the detection.
	SerialId uint64 `protobuf:"varint,1,opt,name=serial_id,json=serialId,proto3" json:"serial_id,omitempty"`
	// The unix timestamp of the detection creation.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The expected rate of detections generated (in frames per second).
	Framerate uint32 `protobuf:"varint,3,opt,name=framerate,proto3" json:"framerate,omitempty"`
	// The list of detected balls, in order of confidence.
	Balls []*Ball `protobuf:"bytes,4,rep,name=balls,proto3" json:"balls,omitempty"`
	// The list of detected robots (both teams).
	Robots []*Robot `protobuf:"bytes,5,rep,name=robots,proto3" json:"robots,omitempty"`
	// The field information (sent periodically).
	Field *Field `protobuf:"bytes,6,opt,name=field,proto3,oneof" json:"field,omitempty"`
}

func (x *Detection) Reset() {
	*x = Detection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Detection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Detection) ProtoMessage() {}

func (x *Detection) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Detection.ProtoReflect.Descriptor instead.
func (*Detection) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{1}
}

func (x *Detection) GetSerialId() uint64 {
	if x != nil {
		return x.SerialId
	}
	return 0
}

func (x *Detection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Detection) GetFramerate() uint32 {
	if x != nil {
		return x.Framerate
	}
	return 0
}

func (x *Detection) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

func (x *Detection) GetRobots() []*Robot {
	if x != nil {
		return x.Robots
	}
	return nil
}

func (x *Detection) GetField() *Field {
	if x != nil {
		return x.Field
	}
	return nil
}

// Ball is the message describing a game ball.
type Ball struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The confidence of the ball detection [0-1].
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// The 3D position of the ball in the field (in millimeters).
	Position *common.Point3Df `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// The 3D velocity of the ball in the field (in millimeters per second).
	Velocity *common.Point3Df `protobuf:"bytes,4,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// Information about the kick that last interacted with the ball, if exists.
	KickInformation *Ball_KickInformation `protobuf:"bytes,6,opt,name=kick_information,json=kickInformation,proto3,oneof" json:"kick_information,omitempty"`
}

func (x *Ball) Reset() {
	*x = Ball{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ball) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ball) ProtoMessage() {}

func (x *Ball) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ball.ProtoReflect.Descriptor instead.
func (*Ball) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{2}
}

func (x *Ball) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Ball) GetPosition() *common.Point3Df {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Ball) GetVelocity() *common.Point3Df {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *Ball) GetKickInformation() *Ball_KickInformation {
	if x != nil {
		return x.KickInformation
	}
	return nil
}

// Robot is the message describing a game robot.
type Robot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The confidence of the robot detection [0-1].
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// The id of the robot.
	RobotId *common.RobotId `protobuf:"bytes,3,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	// The 2D position of the robot in the field (in millimeters).
	Position *common.Point2Df `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// The angle pointing in the direction the robot is facing, i.e. the robot's orientation (in radians).
	Angle float32 `protobuf:"fixed32,5,opt,name=angle,proto3" json:"angle,omitempty"`
	// The 2D velocity of the robot in the field (in millimeters per second).
	Velocity *common.Point2Df `protobuf:"bytes,6,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// The angular velocity of the robot (in radians per second).
	AngularVelocity float32 `protobuf:"fixed32,7,opt,name=angular_velocity,json=angularVelocity,proto3" json:"angular_velocity,omitempty"`
	// The radius of the robot (in millimeters).
	Radius float32 `protobuf:"fixed32,9,opt,name=radius,proto3" json:"radius,omitempty"`
	// The height of the robot (in millimeters).
	Height float32 `protobuf:"fixed32,10,opt,name=height,proto3" json:"height,omitempty"`
	// The width of the dribbler (in millimeters).
	DribblerWidth float32 `protobuf:"fixed32,11,opt,name=dribbler_width,json=dribblerWidth,proto3" json:"dribbler_width,omitempty"`
	// The feedback from the robot.
	Feedback *Robot_Feedback `protobuf:"bytes,12,opt,name=feedback,proto3" json:"feedback,omitempty"`
}

func (x *Robot) Reset() {
	*x = Robot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Robot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Robot) ProtoMessage() {}

func (x *Robot) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Robot.ProtoReflect.Descriptor instead.
func (*Robot) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{3}
}

func (x *Robot) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *Robot) GetRobotId() *common.RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

func (x *Robot) GetPosition() *common.Point2Df {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Robot) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

func (x *Robot) GetVelocity() *common.Point2Df {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *Robot) GetAngularVelocity() float32 {
	if x != nil {
		return x.AngularVelocity
	}
	return 0
}

func (x *Robot) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Robot) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Robot) GetDribblerWidth() float32 {
	if x != nil {
		return x.DribblerWidth
	}
	return 0
}

func (x *Robot) GetFeedback() *Robot_Feedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

// Field is the message describing the game field.
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The incremental unique id of the field.
	SerialId uint64 `protobuf:"varint,1,opt,name=serial_id,json=serialId,proto3" json:"serial_id,omitempty"`
	// The length of the field (in millimeters).
	Length float32 `protobuf:"fixed32,2,opt,name=length,proto3" json:"length,omitempty"`
	// The width of the field (in millimeters).
	Width float32 `protobuf:"fixed32,3,opt,name=width,proto3" json:"width,omitempty"`
	// The depth of the goal (in millimeters).
	GoalDepth float32 `protobuf:"fixed32,4,opt,name=goal_depth,json=goalDepth,proto3" json:"goal_depth,omitempty"`
	// The width of the goal (in millimeters).
	GoalWidth float32 `protobuf:"fixed32,5,opt,name=goal_width,json=goalWidth,proto3" json:"goal_width,omitempty"`
	// The depth of the penalty area (in millimeters).
	PenaltyAreaDepth float32 `protobuf:"fixed32,6,opt,name=penalty_area_depth,json=penaltyAreaDepth,proto3" json:"penalty_area_depth,omitempty"`
	// The width of the penalty area (in millimeters).
	PenaltyAreaWidth float32 `protobuf:"fixed32,7,opt,name=penalty_area_width,json=penaltyAreaWidth,proto3" json:"penalty_area_width,omitempty"`
	// The width of the boundary (in millimeters).
	BoundaryWidth float32 `protobuf:"fixed32,8,opt,name=boundary_width,json=boundaryWidth,proto3" json:"boundary_width,omitempty"`
	// The distance from the goal center to the penalty mark (in millimeters).
	GoalCenterToPenaltyMark float32 `protobuf:"fixed32,9,opt,name=goal_center_to_penalty_mark,json=goalCenterToPenaltyMark,proto3" json:"goal_center_to_penalty_mark,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{4}
}

func (x *Field) GetSerialId() uint64 {
	if x != nil {
		return x.SerialId
	}
	return 0
}

func (x *Field) GetLength() float32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Field) GetWidth() float32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Field) GetGoalDepth() float32 {
	if x != nil {
		return x.GoalDepth
	}
	return 0
}

func (x *Field) GetGoalWidth() float32 {
	if x != nil {
		return x.GoalWidth
	}
	return 0
}

func (x *Field) GetPenaltyAreaDepth() float32 {
	if x != nil {
		return x.PenaltyAreaDepth
	}
	return 0
}

func (x *Field) GetPenaltyAreaWidth() float32 {
	if x != nil {
		return x.PenaltyAreaWidth
	}
	return 0
}

func (x *Field) GetBoundaryWidth() float32 {
	if x != nil {
		return x.BoundaryWidth
	}
	return 0
}

func (x *Field) GetGoalCenterToPenaltyMark() float32 {
	if x != nil {
		return x.GoalCenterToPenaltyMark
	}
	return 0
}

// KickInformation describes the details of a kick.
type Ball_KickInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the robot that kicked the ball.
	RobotId *common.RobotId `protobuf:"bytes,1,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	// The 2D position where the ball was kicked (in millimeters).
	StartPosition *common.Point2Df `protobuf:"bytes,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The 3D velocity of the ball at the start of the kick (in millimeters per second).
	StartVelocity *common.Point3Df `protobuf:"bytes,3,opt,name=start_velocity,json=startVelocity,proto3" json:"start_velocity,omitempty"`
	// The timestamp when the ball was kicked.
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The predicted 2D stop position of the ball (in millimeters).
	PredictedStopPosition *common.Point2Df `protobuf:"bytes,5,opt,name=predicted_stop_position,json=predictedStopPosition,proto3" json:"predicted_stop_position,omitempty"`
	// The predicted timestamp when the ball will stop.
	PredictedStopTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=predicted_stop_timestamp,json=predictedStopTimestamp,proto3" json:"predicted_stop_timestamp,omitempty"`
}

func (x *Ball_KickInformation) Reset() {
	*x = Ball_KickInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ball_KickInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ball_KickInformation) ProtoMessage() {}

func (x *Ball_KickInformation) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ball_KickInformation.ProtoReflect.Descriptor instead.
func (*Ball_KickInformation) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Ball_KickInformation) GetRobotId() *common.RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

func (x *Ball_KickInformation) GetStartPosition() *common.Point2Df {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *Ball_KickInformation) GetStartVelocity() *common.Point3Df {
	if x != nil {
		return x.StartVelocity
	}
	return nil
}

func (x *Ball_KickInformation) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *Ball_KickInformation) GetPredictedStopPosition() *common.Point2Df {
	if x != nil {
		return x.PredictedStopPosition
	}
	return nil
}

func (x *Ball_KickInformation) GetPredictedStopTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.PredictedStopTimestamp
	}
	return nil
}

// Feedback is the message describing the feedback from the robot.
type Robot_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if the dribbler has contact with the ball.
	DribblerBallContact *bool `protobuf:"varint,1,opt,name=dribbler_ball_contact,json=dribblerBallContact,proto3,oneof" json:"dribbler_ball_contact,omitempty"`
	// The charge percentage of the kick mechanism (from 0 to 1).
	KickChargePercentage *float32 `protobuf:"fixed32,2,opt,name=kick_charge_percentage,json=kickChargePercentage,proto3,oneof" json:"kick_charge_percentage,omitempty"`
	// The battery percentage (from 0 to 1).
	BatteryPercentage *float32 `protobuf:"fixed32,3,opt,name=battery_percentage,json=batteryPercentage,proto3,oneof" json:"battery_percentage,omitempty"`
	// The list of wheels and their respective states.
	Wheels []*Robot_Feedback_Wheel `protobuf:"bytes,4,rep,name=wheels,proto3" json:"wheels,omitempty"`
}

func (x *Robot_Feedback) Reset() {
	*x = Robot_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Robot_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Robot_Feedback) ProtoMessage() {}

func (x *Robot_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Robot_Feedback.ProtoReflect.Descriptor instead.
func (*Robot_Feedback) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Robot_Feedback) GetDribblerBallContact() bool {
	if x != nil && x.DribblerBallContact != nil {
		return *x.DribblerBallContact
	}
	return false
}

func (x *Robot_Feedback) GetKickChargePercentage() float32 {
	if x != nil && x.KickChargePercentage != nil {
		return *x.KickChargePercentage
	}
	return 0
}

func (x *Robot_Feedback) GetBatteryPercentage() float32 {
	if x != nil && x.BatteryPercentage != nil {
		return *x.BatteryPercentage
	}
	return 0
}

func (x *Robot_Feedback) GetWheels() []*Robot_Feedback_Wheel {
	if x != nil {
		return x.Wheels
	}
	return nil
}

// Wheel is the message describing the state of an individual wheel.
type Robot_Feedback_Wheel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier for the wheel.
	WheelId uint32 `protobuf:"varint,1,opt,name=wheel_id,json=wheelId,proto3" json:"wheel_id,omitempty"`
	// The speed of the motor for the wheel.
	MotorSpeed float32 `protobuf:"fixed32,2,opt,name=motor_speed,json=motorSpeed,proto3" json:"motor_speed,omitempty"`
}

func (x *Robot_Feedback_Wheel) Reset() {
	*x = Robot_Feedback_Wheel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_perception_detection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Robot_Feedback_Wheel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Robot_Feedback_Wheel) ProtoMessage() {}

func (x *Robot_Feedback_Wheel) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_perception_detection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Robot_Feedback_Wheel.ProtoReflect.Descriptor instead.
func (*Robot_Feedback_Wheel) Descriptor() ([]byte, []int) {
	return file_protocols_perception_detection_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *Robot_Feedback_Wheel) GetWheelId() uint32 {
	if x != nil {
		return x.WheelId
	}
	return 0
}

func (x *Robot_Feedback_Wheel) GetMotorSpeed() float32 {
	if x != nil {
		return x.MotorSpeed
	}
	return 0
}

var File_protocols_perception_detection_proto protoreflect.FileDescriptor

var file_protocols_perception_detection_proto_rawDesc = []byte{
	0x0a, 0x24, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x61, 0x77, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x98, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x53,
	0x4c, 0x5f, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x0d, 0x72, 0x61, 0x77, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x09, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x05, 0x62, 0x61, 0x6c, 0x6c, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x06, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xe8, 0x05, 0x0a, 0x04, 0x42, 0x61, 0x6c, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x44, 0x66, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x33, 0x44, 0x66, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x5a, 0x0a, 0x10, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x69, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0xbc, 0x03, 0x0a,
	0x0f, 0x4b, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x07, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x44, 0x66, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x33, 0x44, 0x66, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x52, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x44, 0x66, 0x52, 0x15,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd3, 0x06, 0x0a, 0x05, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x44, 0x66,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x44, 0x66, 0x52, 0x08,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x72, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x72, 0x69,
	0x62, 0x62, 0x6c, 0x65, 0x72, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x87, 0x03, 0x0a,
	0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x15, 0x64, 0x72, 0x69,
	0x62, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x13, 0x64, 0x72, 0x69, 0x62,
	0x62, 0x6c, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x01, 0x52, 0x14, 0x6b, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x11, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x06, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x52, 0x06, 0x77,
	0x68, 0x65, 0x65, 0x6c, 0x73, 0x1a, 0x43, 0x0a, 0x05, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x74,
	0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64,
	0x72, 0x69, 0x62, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x02, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x41, 0x72, 0x65, 0x61, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x41, 0x72,
	0x65, 0x61, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x3c,
	0x0a, 0x1b, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x17, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_perception_detection_proto_rawDescOnce sync.Once
	file_protocols_perception_detection_proto_rawDescData = file_protocols_perception_detection_proto_rawDesc
)

func file_protocols_perception_detection_proto_rawDescGZIP() []byte {
	file_protocols_perception_detection_proto_rawDescOnce.Do(func() {
		file_protocols_perception_detection_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_perception_detection_proto_rawDescData)
	})
	return file_protocols_perception_detection_proto_rawDescData
}

var file_protocols_perception_detection_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protocols_perception_detection_proto_goTypes = []interface{}{
	(*DetectionWrapper)(nil),                     // 0: protocols.perception.DetectionWrapper
	(*Detection)(nil),                            // 1: protocols.perception.Detection
	(*Ball)(nil),                                 // 2: protocols.perception.Ball
	(*Robot)(nil),                                // 3: protocols.perception.Robot
	(*Field)(nil),                                // 4: protocols.perception.Field
	(*Ball_KickInformation)(nil),                 // 5: protocols.perception.Ball.KickInformation
	(*Robot_Feedback)(nil),                       // 6: protocols.perception.Robot.Feedback
	(*Robot_Feedback_Wheel)(nil),                 // 7: protocols.perception.Robot.Feedback.Wheel
	(*detection.SSL_WrapperPacket)(nil),          // 8: protocols.third_party.detection.SSL_WrapperPacket
	(*game_controller.TrackerWrapperPacket)(nil), // 9: protocols.third_party.game_controller.TrackerWrapperPacket
	(*timestamppb.Timestamp)(nil),                // 10: google.protobuf.Timestamp
	(*common.Point3Df)(nil),                      // 11: protocols.common.Point3Df
	(*common.RobotId)(nil),                       // 12: protocols.common.RobotId
	(*common.Point2Df)(nil),                      // 13: protocols.common.Point2Df
}
var file_protocols_perception_detection_proto_depIdxs = []int32{
	1,  // 0: protocols.perception.DetectionWrapper.detection:type_name -> protocols.perception.Detection
	8,  // 1: protocols.perception.DetectionWrapper.raw_detections:type_name -> protocols.third_party.detection.SSL_WrapperPacket
	9,  // 2: protocols.perception.DetectionWrapper.tracked_detections:type_name -> protocols.third_party.game_controller.TrackerWrapperPacket
	10, // 3: protocols.perception.Detection.created_at:type_name -> google.protobuf.Timestamp
	2,  // 4: protocols.perception.Detection.balls:type_name -> protocols.perception.Ball
	3,  // 5: protocols.perception.Detection.robots:type_name -> protocols.perception.Robot
	4,  // 6: protocols.perception.Detection.field:type_name -> protocols.perception.Field
	11, // 7: protocols.perception.Ball.position:type_name -> protocols.common.Point3Df
	11, // 8: protocols.perception.Ball.velocity:type_name -> protocols.common.Point3Df
	5,  // 9: protocols.perception.Ball.kick_information:type_name -> protocols.perception.Ball.KickInformation
	12, // 10: protocols.perception.Robot.robot_id:type_name -> protocols.common.RobotId
	13, // 11: protocols.perception.Robot.position:type_name -> protocols.common.Point2Df
	13, // 12: protocols.perception.Robot.velocity:type_name -> protocols.common.Point2Df
	6,  // 13: protocols.perception.Robot.feedback:type_name -> protocols.perception.Robot.Feedback
	12, // 14: protocols.perception.Ball.KickInformation.robot_id:type_name -> protocols.common.RobotId
	13, // 15: protocols.perception.Ball.KickInformation.start_position:type_name -> protocols.common.Point2Df
	11, // 16: protocols.perception.Ball.KickInformation.start_velocity:type_name -> protocols.common.Point3Df
	10, // 17: protocols.perception.Ball.KickInformation.start_timestamp:type_name -> google.protobuf.Timestamp
	13, // 18: protocols.perception.Ball.KickInformation.predicted_stop_position:type_name -> protocols.common.Point2Df
	10, // 19: protocols.perception.Ball.KickInformation.predicted_stop_timestamp:type_name -> google.protobuf.Timestamp
	7,  // 20: protocols.perception.Robot.Feedback.wheels:type_name -> protocols.perception.Robot.Feedback.Wheel
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_protocols_perception_detection_proto_init() }
func file_protocols_perception_detection_proto_init() {
	if File_protocols_perception_detection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_perception_detection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Detection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ball); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Robot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ball_KickInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Robot_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_perception_detection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Robot_Feedback_Wheel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protocols_perception_detection_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protocols_perception_detection_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_protocols_perception_detection_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_perception_detection_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protocols_perception_detection_proto_goTypes,
		DependencyIndexes: file_protocols_perception_detection_proto_depIdxs,
		MessageInfos:      file_protocols_perception_detection_proto_msgTypes,
	}.Build()
	File_protocols_perception_detection_proto = out.File
	file_protocols_perception_detection_proto_rawDesc = nil
	file_protocols_perception_detection_proto_goTypes = nil
	file_protocols_perception_detection_proto_depIdxs = nil
}
