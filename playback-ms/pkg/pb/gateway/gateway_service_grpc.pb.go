// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protocols/gateway/gateway_service.proto

package gateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	ReceiveLivestream(ctx context.Context, opts ...grpc.CallOption) (GatewayService_ReceiveLivestreamClient, error)
	GetGameEvents(ctx context.Context, in *GetGameEventsRequest, opts ...grpc.CallOption) (*GetGameEventsResponse, error)
	GetReplayChunk(ctx context.Context, in *GetReplayChunkRequest, opts ...grpc.CallOption) (*GetReplayChunkResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) ReceiveLivestream(ctx context.Context, opts ...grpc.CallOption) (GatewayService_ReceiveLivestreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[0], "/protocols.gateway.GatewayService/ReceiveLivestream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceReceiveLivestreamClient{stream}
	return x, nil
}

type GatewayService_ReceiveLivestreamClient interface {
	Send(*ReceiveLivestreamRequest) error
	Recv() (*ReceiveLivestreamResponse, error)
	grpc.ClientStream
}

type gatewayServiceReceiveLivestreamClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceReceiveLivestreamClient) Send(m *ReceiveLivestreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gatewayServiceReceiveLivestreamClient) Recv() (*ReceiveLivestreamResponse, error) {
	m := new(ReceiveLivestreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) GetGameEvents(ctx context.Context, in *GetGameEventsRequest, opts ...grpc.CallOption) (*GetGameEventsResponse, error) {
	out := new(GetGameEventsResponse)
	err := c.cc.Invoke(ctx, "/protocols.gateway.GatewayService/GetGameEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetReplayChunk(ctx context.Context, in *GetReplayChunkRequest, opts ...grpc.CallOption) (*GetReplayChunkResponse, error) {
	out := new(GetReplayChunkResponse)
	err := c.cc.Invoke(ctx, "/protocols.gateway.GatewayService/GetReplayChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	ReceiveLivestream(GatewayService_ReceiveLivestreamServer) error
	GetGameEvents(context.Context, *GetGameEventsRequest) (*GetGameEventsResponse, error)
	GetReplayChunk(context.Context, *GetReplayChunkRequest) (*GetReplayChunkResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) ReceiveLivestream(GatewayService_ReceiveLivestreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveLivestream not implemented")
}
func (UnimplementedGatewayServiceServer) GetGameEvents(context.Context, *GetGameEventsRequest) (*GetGameEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameEvents not implemented")
}
func (UnimplementedGatewayServiceServer) GetReplayChunk(context.Context, *GetReplayChunkRequest) (*GetReplayChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplayChunk not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_ReceiveLivestream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GatewayServiceServer).ReceiveLivestream(&gatewayServiceReceiveLivestreamServer{stream})
}

type GatewayService_ReceiveLivestreamServer interface {
	Send(*ReceiveLivestreamResponse) error
	Recv() (*ReceiveLivestreamRequest, error)
	grpc.ServerStream
}

type gatewayServiceReceiveLivestreamServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceReceiveLivestreamServer) Send(m *ReceiveLivestreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gatewayServiceReceiveLivestreamServer) Recv() (*ReceiveLivestreamRequest, error) {
	m := new(ReceiveLivestreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GatewayService_GetGameEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetGameEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.gateway.GatewayService/GetGameEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetGameEvents(ctx, req.(*GetGameEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetReplayChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplayChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetReplayChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.gateway.GatewayService/GetReplayChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetReplayChunk(ctx, req.(*GetReplayChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.gateway.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameEvents",
			Handler:    _GatewayService_GetGameEvents_Handler,
		},
		{
			MethodName: "GetReplayChunk",
			Handler:    _GatewayService_GetReplayChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveLivestream",
			Handler:       _GatewayService_ReceiveLivestream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocols/gateway/gateway_service.proto",
}
